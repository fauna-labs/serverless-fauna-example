# Copyright Fauna, Inc.
# SPDX-License-Identifier: MIT-0

service: serverless-fauna-example
configValidationMode: error
useDotenv: true

## If you use Serverless Framework Pro, uncomment the following two lines and replace with your app name and org.
# app: <Replace with your app name>
# org: <Replace with your org>

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  environment:
    FAUNA_SECRET: ${self:fauna.client.secret}
    FAUNA_DOMAIN: ${self:fauna.client.domain}
    FAUNA_SCHEME: ${self:fauna.client.scheme}
    FAUNA_PORT: ${self:fauna.client.port}

plugins:
  - serverless-fauna

functions:
  seed:
    handler: functions/seed.seed

  list_products:
    handler: functions/list_products.list
    events:
      - http:
          method: get
          path: /products
          cors: true
          request:
            parameters:
              headers:
                secret: true
              querystrings:
                priceSort: false
                customerId: false
                storeId: false  
    environment:
      products_by_store: ${self:fauna.indexes.products_by_store.name}
      products_by_customer: ${self:fauna.indexes.products_by_customer.name}
      all_products: ${self:fauna.indexes.all_products.name}
      products_by_price_low_to_high: ${self:fauna.indexes.products_by_price_low_to_high.name}
      products_by_price_high_to_low: ${self:fauna.indexes.products_by_price_high_to_low.name}
      stores: ${self:fauna.collections.stores.name}
      customers: ${self:fauna.collections.customers.name}

  register:
    handler: functions/register.create
    events:
      - http:
          method: post
          path: /customers
          cors: true
          request:
            schemas:
              application/json: ${file(./jsonSchemas/register.json)}
    environment:
      customer_by_email: ${self:fauna.indexes.customer_by_email.name}
      customers: ${self:fauna.collections.customers.name}
        
  login:
    handler: functions/login.login
    events:
      - http:
          method: post
          path: /customers/login
          cors: true
          request:
            schemas:
              application/json: ${file(./jsonSchemas/login.json)}
    environment:
      customer_by_email: ${self:fauna.indexes.customer_by_email.name}

  submit_order:
    handler: functions/submit_order.submit
    events:
      - http:
          method: post
          path: /orders
          cors: true
          request:
            parameters:
              headers:
                secret: true
            schemas:
              application/json: ${file(./jsonSchemas/submit_order.json)}
    environment:
      submit_order: ${self:fauna.functions.submit_order.name}
    
  customer_orders:
    handler: functions/customer_orders.list
    events:
      - http:
          method: get
          path: /orders
          cors: true
          request:
            parameters:
              headers:
                secret: true
    environment:
      orders_by_customer: ${self:fauna.indexes.orders_by_customer.name}


fauna:
  # The following declarations create the same collections, indexes, roles, and functions that
  # are created if you select "Pre-populate with demo data" when creating a new database in the
  # Fauna dashboard (https://dashboard.fauna.com).
  # 
  # To populate the collections with the same demo data, deploy this application,
  # then invoke the `seed` function:
  #   serverless deploy
  #   serverless invoke --function seed
  client:
    secret: ${env:FAUNA_SECRET}
    domain: ${env:FAUNA_DOMAIN, "db.fauna.com"}
    scheme: ${env:FAUNA_SCHEME, "https"}
    port: ${env:FAUNA_PORT, "443"}
  collections:
    # Collections accept any parameter that CreateCollection() accepts.
    # For more details on CreateCollection(), read https://docs.fauna.com/fauna/current/api/fql/functions/createcollection?lang=javascript#param_object
    customers:
      name: customers
      data:
        # Setting 'deletion_policy' to 'retain' leaves a resource intact if the entire application is removed with `serverless remove`.
        # Typically you would set this to 'retain' for a production environment and leave it unset for environments that are
        # frequently created and destroyed.
        deletion_policy: retain

    orders:
      name: orders

    products:
      name: products

    stores:
      name: stores

  indexes:
    # Indexes accept any parameter that CreateIndex() accepts
    # For more details on CreateIndex(), read https://docs.fauna.com/fauna/current/api/fql/functions/createindex?lang=javascript#param_object
    orders_by_customer:
      name: orders_by_customer
      source: ${self:fauna.collections.orders.name}
      terms:
        fields: 
          - data.customer

    products_by_customer:
      name: products_by_customer
      source: ${self:fauna.collections.orders.name}
      terms:
        fields: 
          - data.customer
      values:
        fields:
          - data.cart.product

    products_by_store:
      name: products_by_store
      source: ${self:fauna.collections.products.name}
      terms:
        fields: 
          - data.store
      values:
        fields:
          - ref

    products_by_price_high_to_low:
      name: products_by_price_high_to_low
      source: ${self:fauna.collections.products.name}
      terms:
        fields:
          - ref
      values:
        fields:
          - path: data.price
            reverse: true
          - ref    

    products_by_price_low_to_high:
      name: products_by_price_low_to_high
      source: ${self:fauna.collections.products.name}
      terms:
        fields:
          - ref
      values:
        fields:
          - data.price
          - ref 
    
    customer_by_email:
      name: customer_by_email
      source: ${self:fauna.collections.customers.name}
      data:
        deletion_policy: retain
      terms:
        fields:
          - data.email

    all_orders:
      name: all_orders   
      source: ${self:fauna.collections.orders.name}

    all_customers:
      name: all_customers   
      source: ${self:fauna.collections.customers.name}

    all_stores:
      name: all_stores  
      source: ${self:fauna.collections.stores.name}

    all_products:
      name: all_products  
      source: ${self:fauna.collections.products.name}

  functions:
    submit_order:
      name: submit_order
      body: ${file('./fql/SubmitOrder.fql')}
      role: admin


  roles:
    # Roles accept any parameter that CreateRole() accepts
    # For more details on CreateRole(), read https://docs.fauna.com/fauna/current/api/fql/functions/createrole?lang=javascript
    customer:
      name: customer
      membership: ${self:fauna.collections.customers.name}
      privileges:
        - collection: ${self:fauna.collections.products.name}
          actions:
            read: true
        - collection: ${self:fauna.collections.stores.name}
          actions:
            read: true
        - collection: ${self:fauna.collections.orders.name}
          actions:
            read: ${file('./fql/Owner.fql')}
        - index: ${self:fauna.indexes.all_products.name}
          actions:
            read: true
        - index: ${self:fauna.indexes.products_by_store.name}
          actions:
            read: true
        - index: ${self:fauna.indexes.products_by_price_low_to_high.name}
          actions:
            read: true
        - index: ${self:fauna.indexes.products_by_price_high_to_low.name}
          actions:
            read: true
        - index: ${self:fauna.indexes.orders_by_customer.name}
          actions:
            read: ${file('./fql/EqualsCurrentIdentityArity1.fql')}
        - index: ${self:fauna.indexes.products_by_customer.name}
          actions:
            read: ${file('./fql/EqualsCurrentIdentityArity1.fql')}
        - function: ${self:fauna.functions.submit_order.name}
          actions:
            call: ${file('./fql/EqualsCurrentIdentityArity2.fql')}
