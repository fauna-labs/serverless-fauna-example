service: serverless-fauna-example
app: serverless-fauna-example
org: fireridlle
configValidationMode: error

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

plugins:
  - serverless-fauna
functions:
  seed:
    handler: functions/seed.seed
    environment:
      FAUNA_SECRET: ${self:fauna.client.secret}
  list_products:
    handler: functions/listProducts.list
    events:
      - http:
          method: get
          path: /products
          cors: true
          request:
            parameters:
              querystrings:
                priceSort: false
                customerId: false
                storeId: false   
    environment:
      FAUNA_SECRET: ${self:fauna.client.secret}


fauna:
  client:
    secret: ${param:FAUNA_ROOT_KEY}
    # domain: db.fauna.com
    # port: 433
    # scheme: https
  collections:
    customers:
      # can accept any param that accept CreateCollection query. 
      # Read more https://docs.fauna.com/fauna/current/api/fql/functions/createcollection?lang=javascript#param_object
      name: customers
      data:
        deletion_policy: retain

    orders:
      name: orders

    products:
      name: products

    stores:
      name: stores

  indexes:
    products_by_customer:
      # can accept any param that accept CreateIndex query except source.fields
      # Read more https://docs.fauna.com/fauna/current/api/fql/functions/createindex?lang=javascript#param_object
      name: products_by_customer
      source: ${self:fauna.collections.orders.name}
      terms:
        fields: 
          - data.customer
      values:
        fields:
          - data.cart.product

    products_by_store:
      name: products_by_store
      source: ${self:fauna.collections.products.name}
      terms:
        fields: 
          - data.store
      values:
        fields:
          - ref

    inventory_by_product:
      name: inventory_by_product
      source: ${self:fauna.collections.products.name}
      terms:
        fields:
          - data.name
      values:
        fields:
          - path: data.quantity
            reverse: true
          - data.description
          - ref

    products_by_price_high_to_low:
      name: products_by_price_high_to_low
      source: ${self:fauna.collections.products.name}
      terms:
        fields:
          - ref
      values:
        fields:
          - path: data.price
            reverse: true
          - ref    

    products_by_price_low_to_high:
      name: products_by_price_low_to_high
      source: ${self:fauna.collections.products.name}
      terms:
        fields:
          - ref
      values:
        fields:
          - data.price
          - ref 

    all_orders:
      name: all_orders   
      source: ${self:fauna.collections.orders.name}

    all_customers:
      name: all_customers   
      source: ${self:fauna.collections.customers.name}

    all_stores:
      name: all_stores  
      source: ${self:fauna.collections.stores.name}

    all_products:
      name: all_products  
      source: ${self:fauna.collections.products.name}

  functions:
    submit_order:
      name: submit_order
      body: ${file('./submit_order.fql')}


  # roles:
  #   movies_reader:
  #     # can accept any param that accept CreateRole query except source.fields
  #     # Read more https://docs.fauna.com/fauna/current/api/fql/functions/createrole?lang=javascript
  #     name: movies_reader
  #     membership:
  #       resource: ${self:fauna.collections.users.name}
  #       predicate: ${file(./IsActiveUser.fql)}
  #     privileges:
  #       - collection: ${self:fauna.collections.movies.name}
  #         actions:
  #           read: true
  #       - index: ${self:fauna.indexes.movies_by_type.name}
  #         actions:
  #           read: true
  #       - index: ${self:fauna.indexes.movies_by_category.name}
  #         actions:
  #           read: true
  #       - index: ${self:fauna.indexes.sort_by_year.name}
  #         actions:
  #           read: true

  #   editors:
  #     name: editors
  #     membership:
  #       - ${self:fauna.collections.scriptwriters.name}
  #       - ${self:fauna.collections.directors.name}
  #     privileges:
  #       - collection: ${self:fauna.collections.movies.name}
  #         actions:
  #           read: true
  #           write: ${file(./CanModifyMovie.fql)}