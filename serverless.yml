service: serverless-fauna-example
app: serverless-fauna-example
org: fireridlle
configValidationMode: error

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  environment:
    FAUNA_SECRET: ${self:fauna.client.secret}

plugins:
  - serverless-fauna
functions:
  seed:
    handler: functions/seed.seed

  listProducts:
    handler: functions/list_products.list
    events:
      - http:
          method: get
          path: /products
          cors: true
          request:
            parameters:
              querystrings:
                priceSort: false
                customerId: false
                storeId: false  

  register:
    handler: functions/register.create
    events:
      - http:
          method: post
          path: /customers
          cors: true
          request:
            schemas:
              application/json: ${file(./jsonSchemas/register.json)}
        
  login:
    handler: functions/login.login
    events:
      - http:
          method: post
          path: /customers/login
          cors: true
          request:
            schemas:
              application/json: ${file(./jsonSchemas/login.json)}

  submit_order:
    handler: functions/submit_order.submit
    events:
      - http:
          method: post
          path: /orders
          cors: true
          request:
            parameters:
              headers:
                secret: true
            schemas:
              application/json: ${file(./jsonSchemas/submit_order.json)}
    
  customer_orders:
    handler: functions/customer_orders.list
    events:
      - http:
          method: get
          path: /orders
          cors: true
          request:
            parameters:
              headers:
                secret: true


fauna:
  client:
    secret: ${param:FAUNA_ROOT_KEY}
    # domain: db.fauna.com
    # port: 433
    # scheme: https
  collections:
    customers:
      # can accept any param that accept CreateCollection query. 
      # Read more https://docs.fauna.com/fauna/current/api/fql/functions/createcollection?lang=javascript#param_object
      name: customers
      data:
        deletion_policy: retain

    orders:
      name: orders

    products:
      name: products

    stores:
      name: stores

  indexes:
    orders_by_customer:
      name: orders_by_customer
      source: ${self:fauna.collections.orders.name}
      terms:
        fields: 
          - data.customer

    products_by_customer:
      # can accept any param that accept CreateIndex query except source.fields
      # Read more https://docs.fauna.com/fauna/current/api/fql/functions/createindex?lang=javascript#param_object
      name: products_by_customer
      source: ${self:fauna.collections.orders.name}
      terms:
        fields: 
          - data.customer
      values:
        fields:
          - data.cart.product

    products_by_store:
      name: products_by_store
      source: ${self:fauna.collections.products.name}
      terms:
        fields: 
          - data.store
      values:
        fields:
          - ref

    products_by_price_high_to_low:
      name: products_by_price_high_to_low
      source: ${self:fauna.collections.products.name}
      terms:
        fields:
          - ref
      values:
        fields:
          - path: data.price
            reverse: true
          - ref    

    products_by_price_low_to_high:
      name: products_by_price_low_to_high
      source: ${self:fauna.collections.products.name}
      terms:
        fields:
          - ref
      values:
        fields:
          - data.price
          - ref 
    
    customer_by_email:
      name: customer_by_email
      source: ${self:fauna.collections.customers.name}
      data:
        deletion_policy: retain
      terms:
        fields:
          - data.email

    all_orders:
      name: all_orders   
      source: ${self:fauna.collections.orders.name}

    all_customers:
      name: all_customers   
      source: ${self:fauna.collections.customers.name}

    all_stores:
      name: all_stores  
      source: ${self:fauna.collections.stores.name}

    all_products:
      name: all_products  
      source: ${self:fauna.collections.products.name}

  functions:
    submit_order:
      name: submit_order
      body: ${file('./fql/SubmitOrder.fql')}
      role: admin


  roles:
    customer:
      # can accept any param that accept CreateRole query except source.fields
      # Read more https://docs.fauna.com/fauna/current/api/fql/functions/createrole?lang=javascript
      name: customer
      membership: ${self:fauna.collections.customers.name}
      privileges:
        - function: ${self:fauna.functions.submit_order.name}
          actions:
            call: true
        - index: ${self:fauna.indexes.orders_by_customer.name}
          actions:
            read: true
        - collection: ${self:fauna.collections.orders.name}
          actions:
            read: true